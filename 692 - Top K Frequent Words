struct Comparator{
   bool operator()(pair <string ,int> a, pair <string, int> b){
      if(a.second != b.second) return !(a.second < b.second);
         return !(a.first > b.first);
   }
};
class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
         vector<string> res;
     unordered_map <string,int> mp;
    priority_queue < pair <string, int>, vector < pair <string, int> >, Comparator > minh;
        for(int i=0;i<words.size();i++)
        {
            mp[words[i]]++;
        }
        for(auto i=mp.begin();i!=mp.end();i++)
        {
            minh.push({i->first,i->second});
            if(minh.size()>k)
                minh.pop();
        }
        while(!minh.empty())
              {
                    pair <string, int> temp = minh.top();
                     minh.pop();
                     res.push_back(temp.first);
              }
              reverse(res.begin(), res.end());
            
        
              return res;
    }
};
